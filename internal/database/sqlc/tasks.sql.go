// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "tasks" (title, description, user_id) VALUES
($1,$2,$3) RETURNING id, title, description, is_completed, user_id, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string
	Description string
	UserID      int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Title, arg.Description, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM "tasks"
WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, is_completed, user_id, created_at, updated_at FROM "tasks"
WHERE user_id = $1 AND id = $2
`

type GetTaskByIDParams struct {
	UserID int32
	ID     int32
}

func (q *Queries) GetTaskByID(ctx context.Context, arg GetTaskByIDParams) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, arg.UserID, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, is_completed, user_id, created_at, updated_at FROM "tasks"
WHERE user_id = $1 AND id <= $2 AND (is_completed = $3 OR $3 IS NULL)
ORDER BY id DESC
LIMIT $4
`

type GetTasksParams struct {
	UserID      int32
	Cursor      int32
	IsCompleted pgtype.Bool
	Limit       int32
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks,
		arg.UserID,
		arg.Cursor,
		arg.IsCompleted,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE "tasks"
SET	title = $2,
	description = $3,
	is_completed = $4,
	updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, description, is_completed, user_id, created_at, updated_at
`

type UpdateTaskParams struct {
	ID          int32
	Title       string
	Description string
	IsCompleted bool
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
